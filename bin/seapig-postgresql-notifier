#!/bin/env ruby

require 'seapig-client'
require 'active_record'
require 'slop'
require 'yaml'

require_relative '../app/models/seapig_dependency.rb'

STDOUT.sync = true

OPTIONS = Slop.parse { |o|
	o.string '-c', '--connect', "Seapig server address (default: ws://127.0.0.1:3001)", default: "ws://127.0.0.1:3001"
	o.array '-i', '--intervals', 'List of durations for interval objects (e.g. 1,60,3600)', default: []
	o.string '-b', '--database-url', 'Database URL (e.g. postgres://USER:PASS@PGHOST/DBNAME)'
	o.string '-e', '--environment' , 'Rails environment to use when loading database config from config/database.yml'
	o.bool '-d', '--debug', 'Show debug messages'
	o.on '-h', '--help' do puts o; exit end
}

if (not OPTIONS["database-url"]) and (not File.exist?("config/database.yml")) then puts "Either -d or config/database.yml is needed"; exit end
database_config = (OPTIONS["database-url"] or YAML.load_file("config/database.yml")[(OPTIONS["environment"] or ENV["RAILS_ENV"] or "development")])
ActiveRecord::Base.establish_connection(database_config)

startup_resend_condition = " OR updated_at > (SELECT max(updated_at) FROM seapig_dependencies) - INTERVAL '60 seconds'" # timeout hits in 20-30s so 60s should be safe

EM.run {

	client = SeapigClient.new(OPTIONS["connect"], name: 'notifier', debug: OPTIONS.debug?)

	master_object = client.master(SeapigDependency::OBJECT_PREFIX+"*")
	master_object.onproduce { |child|
		version = (SeapigDependency.version(child.id[SeapigDependency::OBJECT_PREFIX.size .. -1]) or 0)
		child.set(version: version)
		puts 'Dependency version produced: %30s    version: %-10s'%[child.id,version]
	}

	on_database_change = Proc.new {
		next if not client.connected
		SeapigDependency.where("current_version != reported_version"+startup_resend_condition).each { |seapig_dependency|
			puts "Dependency version changed, uploading: %30s    version:%-10s"%[seapig_dependency.name,seapig_dependency.current_version]
			master_object[SeapigDependency::OBJECT_PREFIX+seapig_dependency.name].set(version: seapig_dependency.current_version)
			seapig_dependency.reported_version = seapig_dependency.current_version
			seapig_dependency.save!
		}
		startup_resend_condition = ""
	}


	Thread.new {
		begin
			ActiveRecord::Base.connection_pool.with_connection { |connection|
				connection = connection.instance_variable_get(:@connection)
				connection.exec("LISTEN seapig_dependency_changed")
				loop {
					connection.wait_for_notify { |channel, pid, payloads|
						EM.schedule(on_database_change)
					}
				}
			}
		rescue Exception => e
			puts "Exception in database thread"
			p e
			EM.schedule {
				client.disconnect
				EM.stop
			}
		end
	}


	OPTIONS["intervals"].each { |interval|
		seapig = client.master('Seconds:'+interval)
		seapig.set(version: Time.new.to_i/interval.to_i)
		EM.add_periodic_timer(interval.to_i) {
			seapig.set(version: Time.new.to_i/interval.to_i)
		}
	}


	client.onstatuschange { EM.schedule on_database_change }
}
